{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Scopie","text":"<p>Authorization engine providing fine grained access while you control the data. Aimed at being easy to use and implement without overtaking other parts of your system.</p>"},{"location":"#quick-intro","title":"Quick Intro","text":"<p>See implementations for more complete guides per language.</p> JavascriptTypescriptGoPython <pre><code>import { isAllowed } from \"scopie\";\n\nconst users = {\n    elsa: {\n        rules: [\"allow/blog/create|update\"],\n    },\n    bella: {\n        rules: [\"allow/blog/create\"],\n    },\n]\nconst blogPosts = {}\n\nfunction createBlog(username, blogSlug, blogContent) {\n    const user = users[username]\n    if (isAllowed([\"blog/create\"], user.rules)) {\n        blogPosts[blogSlug] = {\n            author: user,\n            content: blogContent,\n        }\n    }\n}\n\nfunction updateBlog(username, blogSlug, blogContent) {\n    const user = users[username]\n    if (isAllowed([\"blog/update\"], user.rules)) {\n        blogPosts[blogSlug] = {\n            author: user,\n            content: blogContent,\n        }\n    }\n}\n</code></pre> <pre><code>import { isAllowed } from \"scopie\";\n\ntype User = {\n    rules: Array&lt;string&gt;;\n};\n\ntype BlogPost = {\n    author: User;\n    content: string;\n}\n\ntype UserStore = {\n    [key: string]: User\n}\n\ntype BlogStore = {\n    [key: string]: BlogPost\n}\n\nconst users: UserStore = {\n    elsa: {\n        rules: [\"allow/blog/create|update\"],\n    },\n    bella: {\n        rules: [\"allow/blog/create\"],\n    },\n}\n\nconst blogPosts: BlogStore = {}\n\nfunction createBlog(username: string, blogSlug: string, blogContent: string) {\n    const user = users[username]\n    if (isAllowed([\"blog/create\"], user.rules)) {\n        blogPosts[blogSlug] = {\n            author: user,\n            content: blogContent,\n        }\n    }\n}\n\nfunction updateBlog(username: string, blogSlug: string, blogContent: string) {\n    const user = users[username]\n    if (isAllowed([\"blog/update\"], user.rules)) {\n        blogPosts[blogSlug] = {\n            author: user,\n            content: blogContent,\n        }\n    }\n}\n</code></pre> <pre><code>import (\n    \"errors\"\n    \"github.com/miniscruff/scopie-go\"\n)\n\ntype User struct {\n    Rules []string\n}\n\ntype BlogPost struct {\n    Author  User\n    Content string\n}\n\nvar userStore map[string]User = map[string]User{\n    \"elsa\": User{\n        Rules: []string{\"allow/blog/create|update\"},\n    },\n    \"belle\": User{\n        Rules: []string{\"allow/blog/create\"},\n    },\n}\nvar blogStore map[string]BlogPost = map[string]BlogPost{}\n\nfunc createBlog(username, blogSlug, blogContent string) error {\n    user := users[username]\n    allowed, err := scopie.IsAllowed([]string{\"blog/create\"}, user.Rules, nil)\n    if err != nil {\n        return err\n    }\n\n    if !allowed {\n        return errors.New(\"not allowed to create a blog post\")\n    }\n\n    blogStore[blogSlug] = BlogPost{\n        Author: user,\n        Content: blogContent,\n    }\n    return nil\n}\n\nfunc updateBlog(username, blogSlug, blogContent string) error {\n    user := users[username]\n    allowed, err := scopie.IsAllowed([]string{\"blog/update\"}, user.Rules, nil) {\n    if err != nil {\n        return err\n    }\n\n    if !allowed {\n        return errors.New(\"not allowed to update this blog post\")\n    }\n\n    blogPosts[blogSlug] = BlogPost{\n        author: user,\n        content: blogContent,\n    }\n    return nil\n}\n</code></pre> <pre><code>from scopie import is_allowed\n\nusers = {\n    \"elsa\": {\n        \"rules\": [\"allow/blog/create|update\"],\n    },\n    \"bella\": {\n        \"rules\": [\"allow/blog/create\"],\n    },\n}\n\nblogPosts = {}\n\ndef create_blog(username, blogSlug, blogContent):\n    user = users[username]\n    if is_allowed([\"blog/create\"], user[\"rules\"]):\n        blogPosts[blogSlug] = {\n            \"author\": user,\n            \"content\": blogContent,\n        }\n\ndef update_blog(username, blogSlug, blogContent):\n    user = users[username]\n    if is_allowed([\"blog/update\"], user[\"rules\"]):\n        blogPosts[blogSlug] = {\n            \"author\": user,\n            \"content\": blogContent,\n        }\n</code></pre>"},{"location":"implementations/","title":"Official Implementations","text":""},{"location":"implementations/#go","title":"Go","text":""},{"location":"implementations/#javascript","title":"Javascript","text":""},{"location":"implementations/#python","title":"Python","text":""},{"location":"implementations/#community-implementations","title":"Community Implementations","text":"<p>Reach out to get your project listed here.</p>"},{"location":"implementations/#requirements","title":"Requirements","text":"<ol> <li>Create public functions matching the interface as defined in functions</li> <li>Handle all the scenarios defined in the scenarios.json</li> <li>Depending on language you may have to alter the function to be more ergonomic while keeping the functionality</li> <li>Create a pull request to get listed above</li> </ol>"},{"location":"playground/","title":"Playground","text":"<p>Try out scopes and rules in scopie to determine if the actor would be allowed to run that action.</p>"},{"location":"playground/#scopes","title":"Scopes","text":"blog/create  Valid"},{"location":"playground/#rules","title":"Rules","text":"allow/blog/create|update allow/accounts/read  Valid"},{"location":"playground/#result","title":"Result","text":"Is Allowed"},{"location":"examples/","title":"Examples","text":"<p>Scope and rules for sample projects.</p>"},{"location":"examples/#github-access-token","title":"GitHub Access Token","text":""},{"location":"examples/#discord-permissions","title":"Discord Permissions","text":""},{"location":"examples/discord_permissions/","title":"Discord Permissions","text":"<p>Discord users role based authorization for server administration. Below is an example of how you might go about supporting the same level of control but using scopie and scope based permissions.</p> <p>Not all discord permissions are listed below.</p>"},{"location":"examples/discord_permissions/#server-scopes","title":"Server Scopes","text":"<p>Our structure for discord scopes is <code>(allow or deny)/server/&lt;server_id&gt;/&lt;group&gt;/&lt;action&gt;</code>. This is to allow us to define scopes across different servers while allowing us to also create different namespaces for scopes separate from servers later. It is also possible to separate server scopes completely from other servers, rather then trying to compare the server id within the scope.</p> Group Action Description channels create Create new channels channels update Update channel values channels view View channels expressions create Add custom emojis, stickers, and sounds expressions update Update existing custom expressions expressions remove Remove custom expressions webhooks create Create new webhooks webhooks update Update existing webhooks webhooks remove Remove webhooks members kick Kick other members members ban Ban other members members invite Invite new members messages send Able to send messages messages threads Able to send messages to threads messages links Able to send links in messages messages files Able to send files in messages messages reactions Able to react to messages"},{"location":"examples/discord_permissions/#example-scopes","title":"Example scopes","text":"<p>Here are a small list of examples scopes. Note that not all of these are practical and would be used in a real scenario.</p>"},{"location":"examples/discord_permissions/#super-wildcards","title":"Super wildcards","text":"Scope Description <code>allow/**</code> Access to everything <code>allow/server/**</code> Access to everything on any server <code>allow/server/&lt;server_id&gt;/**</code> Access to everything on one server <code>allow/server/&lt;server_id&gt;/&lt;group&gt;/**</code> Access all actions related to a group <p>Note that the last example woudl work the same with a normal wildcard.</p>"},{"location":"examples/discord_permissions/#wildcards","title":"Wildcards","text":"Scope Description <code>allow/server/*/...</code> Access to actions on any server <code>allow/server/&lt;server_id&gt;/*/...</code> Access to actions on one server"},{"location":"examples/github_token/","title":"GitHub Access Tokens","text":"<p>If you ever needed to create an access token for GitHub this example attempts to match the same level of control using scopie. For brevity reasons, only the scopes related to repositories are listed.</p>"},{"location":"examples/github_token/#repository-scopes","title":"Repository Scopes","text":"<p>Our structure for repository scopes is <code>(allow or deny)/repo/&lt;org&gt;/&lt;repo&gt;/&lt;group&gt;/&lt;action&gt;</code>. This allows us to create organization, user or other scopes in a separate top level namespace, such that wildcards and super wildcards are grouped at the top level.</p> Group Action Description status read Read commit status deployments read Read deployment status invites read Read invitations invites write Send invitations to other users security_events read Read security events workflow update Update GitHub action workflows packages upload Upload packages to GitHub package registry packages read Read packages from GitHub package registry packages delete Delete packages to GitHub package registry hooks write Write repository hooks hooks update Update repository hooks hooks delete Delete repository hooks discussions read Read discussions discussions create Create a new discussion discussions comment Comment on an existing discussion discussions delete Delete a discussion audits read Read the audit log"},{"location":"examples/github_token/#full-control-options","title":"Full control options","text":"<p>Under the GitHub UI you can select the group headers to create tokens with full control over that group. The equilivent to that in scopie is using wildcards.</p> <p>For example, full control over the \"discussion\" actions, would be: <pre><code>allow/repo/&lt;org&gt;/&lt;repo&gt;/discussions/*\n</code></pre></p>"},{"location":"examples/github_token/#example-scopes","title":"Example scopes","text":"<p>Here are a small list of examples scopes. Not all of these would make sense in practice.</p>"},{"location":"examples/github_token/#super-wildcards","title":"Super wildcards","text":"<p>These scopes relate to using super wildcards for generalized access.</p> Scope Description <code>allow/**</code> Access to everything <code>allow/repo/**</code> Access to everything under any organization <code>allow/repo/&lt;org&gt;/**</code> Access to everything under the organization <code>allow/repo/&lt;org&gt;/&lt;repo&gt;/**</code> Access to everything under the repository <code>allow/repo/&lt;org&gt;/&lt;repo&gt;/&lt;group&gt;/**</code> Access to all actions under the group"},{"location":"examples/github_token/#wildcards","title":"Wildcards","text":"<p>These scopes relate to using wildcards for generalized access.</p> Scope Description <code>allow/repo/*/...</code> Access to actions under any org <code>allow/repo/&lt;org&gt;/*/...</code> Access to actions under any repo <code>allow/repo/&lt;org&gt;/&lt;repo&gt;/*/...</code> Access to actions under any group <code>allow/repo/*/*/</code> Access to actions under any org and any repo <p>Note that when scopes have multiple levels of variables you may need to wildcard more then one block. For example if you want to give access for specifically creating hooks ( <code>hooks/create</code> ) on any repository in any organization, you would use <code>allow/repo/*/*/hooks/create</code>.</p> <p>Its possible to give access to any repository in the org as well such as <code>allow/repo/&lt;org&gt;/*/hooks/create</code>.</p> <p>There is also the unlikely scenario of giving access to a specific repository name in any org such as <code>allow/repo/*/docker_images/packages/upload</code> which would give access to upload packages to the \"docker_images\" repository in any organization.</p>"},{"location":"examples/github_token/#variables","title":"Variables","text":"<p>Actor scopes can include variables that relate to actor attempting to do the action. In our case we are going to use the <code>@username</code> variable which can be used as the organization just like GitHub.</p> Scope Description <code>allow/repo/@username/**</code> Allow our user to do anything in our own organization"},{"location":"specification/","title":"Specification","text":"<p>Scopie is designed as a set of logic rules such that it is possible to evaluate whether or not an action is allowed to take place.</p> <p>A full list of specifications with inputs and outputs are available  as a JSON file that implementations should use in there test suite. This file also includes specific tests for benchmarking performance.</p> <ul> <li> <p> Terms</p> <p>Understanding the terminology of Scopie.</p> </li> <li> <p> Functions</p> <p>What functions are defined in scopie implementations.</p> </li> <li> <p> Errors</p> <p>Lookup what errors you may run into.</p> </li> <li> <p> Logic Flow</p> <p>Read about the logic rules for processing authorization.</p> </li> </ul>"},{"location":"specification/bnf/","title":"BNF Notation","text":"<p>Backus Naur Form notation of the scopie parsing rules. Note that just passing BNF is not enough to be a valid scope as there are edge cases not specified. One such example is that super wildcards must be the last block.</p> <pre><code>&lt;rule&gt; ::= &lt;any_permission&gt; (&lt;block_sep&gt; &lt;scope&gt;)+\n&lt;scope&gt; ::= &lt;block&gt; (&lt;block_sep&gt; &lt;block&gt;)+ | &lt;block&gt;\n\n&lt;block&gt; ::= &lt;literals&gt; | &lt;array_block&gt; | &lt;var_block&gt; | &lt;wildcard&gt; | &lt;super_wildcard&gt;\n&lt;array_block&gt; ::= &lt;literals&gt; (&lt;array_sep&gt; &lt;literals&gt;)+\n&lt;var_block&gt; ::= &lt;var_prefix&gt; &lt;literals&gt;\n\n&lt;any_permission&gt; ::= &lt;allow_permission&gt; | &lt;deny_permission&gt;\n\n&lt;block_sep&gt; ::= \"/\"\n&lt;array_sep&gt; ::= \"|\"\n&lt;var_prefix&gt; ::= \"@\"\n&lt;wildcard&gt; ::= \"*\"\n&lt;super_wildcard&gt; ::= \"**\"\n&lt;allow_permission&gt; ::= \"allow\"\n&lt;deny_permission&gt; ::= \"deny\"\n&lt;literals&gt; ::= ([A-Z] | [a-z] | [0-9] | \"_\" | \"-\")+\n</code></pre>"},{"location":"specification/errors/","title":"Errors","text":"<p>When validating a scope or trying to process a scope or rule that has an incorrect format we return or throw errors. To keep consistency across languages we define an error format in the specification and include error messages as part of the validation test suite.</p> <p>Parsing the errors should not be required, this format is aimed at being helpful to log for internal debugging, but are probably not useful for your end users.</p> <p>In cases where you are taking user input and saving a scope, you should use the <code>validate_scope</code> function to check if the provided value is properly formatted. You may also need to do extra processing to make sure the values defined in the scope logically make sense in your system as a whole.</p> <p>Formats: When getting an error processing it will mention whether the invalid data came from a rule or scope. <pre><code>scopie-&lt;code&gt;\n    in &lt;scope or rule&gt;: &lt;short message&gt;\n</code></pre></p> <p>When using the validation function we omit the scope or rule as they are not given. <pre><code>scopie-&lt;code&gt; &lt;short message&gt;\n</code></pre></p> <p>For scopes of <code>[\"blog/:15/read\"]</code>, since <code>:</code> is not allowed in scopes. <pre><code>scopie-100 in scope: invalid character ':'\n</code></pre></p> <p>Errors here are not in any particular order, but just as they are discovered or valiations written. In a lot of cases this will just reiterate the summary of the error but in some it will include variables from the respective scope or actor.</p>"},{"location":"specification/errors/#100","title":"100","text":"<p>Invalid character.</p> <p>Scopie only allows letters, numbers, underscore <code>_</code>  and dashes <code>-</code> in scope blocks, any other character is invalid.</p> Valid<pre><code>blog/15/create\n</code></pre> Invalid<pre><code>blog/:15/create\n     ^ invalid character ':'\n</code></pre> Message format<pre><code>invalid character '{character}'\n</code></pre>"},{"location":"specification/errors/#101","title":"101","text":"<p>Variable inside array group.</p> <p>Array blocks can not contain variables and must be the entire block on its own. This is so that variables are used more like namespaces or grouping specifiers and would conflict with array blocks that are one of a few actions or specific namespaces.</p> Valid<pre><code>projects/@project/repository/create\n</code></pre> Invalid<pre><code>projects/acme|sesame|@project/repository/create\n                     ^ variable not allowed inside array group\n</code></pre> Message format<pre><code>variable '{key}' found in array block\n</code></pre>"},{"location":"specification/errors/#102","title":"102","text":"<p>Wildcard in array.</p> <p>Array blocks can not contain wildcards and must be the entire block on its own. Having a wildcard would override any array or literal value.</p> Valid<pre><code>projects/acme/*\n</code></pre> Invalid<pre><code>projects/acme/read|write|*\n</code></pre> Message format<pre><code>wildcard found in array block\n</code></pre>"},{"location":"specification/errors/#103","title":"103","text":"<p>Super wildcard in array</p> <p>Array blocks can not contain super wildcards and must be the entire block on its own. Having a super wildcard would override any array or literal value.</p> Valid<pre><code>projects/acme/**\n</code></pre> Invalid<pre><code>projects/acme/read|write|**\n</code></pre> Message format<pre><code>super wildcard found in array block\n</code></pre>"},{"location":"specification/errors/#104","title":"104","text":"<p>Variable key not found in dictionary.</p> <p>A variable was referenced that does not exist in the variable map or dictionary.</p> Valid<pre><code>vars = { \"project\": \"acme\" }\nprojects/@project/repository/create\n</code></pre> Invalid<pre><code>vars = { \"user\": \"tnt\" }\nprojects/@project/repository/create\n         ^ variable project does not exist\n</code></pre> Message format<pre><code>variable '{key}' not found\n</code></pre>"},{"location":"specification/errors/#105","title":"105","text":"<p>Super wildcard not in the last block</p> <p>A super wildcard will auto match all future blocks, because of this any further blocks would be ignored.</p> Valid<pre><code>projects/repository/**\n</code></pre> Invalid<pre><code>projects/repository/**/create\n</code></pre> Message format<pre><code>super wildcard not in the last block\n</code></pre>"},{"location":"specification/errors/#106","title":"106","text":"<p>Empty scope</p> <p>Having an empty scope for either the actor or rule doesn't actually make any sense for authorization and is likely caused by something else. We return an error here instead to hopefully catch this instead of silently denying.</p> Valid<pre><code>accounts/create\n</code></pre> Invalid<pre><code># empty\n</code></pre> Message format<pre><code>scope was empty\n</code></pre>"},{"location":"specification/errors/#107","title":"107","text":"<p>Inconsistent Array</p> <p>Arrays of scopes and arrays of rules are expected to all be one type.</p> Valid<pre><code>accounts/create\nblog/read\n</code></pre> Invalid<pre><code>accounts/create\nallow/blog/read\n</code></pre> Message format<pre><code>inconsistent array of scopes and rules\n</code></pre>"},{"location":"specification/functions/","title":"Functions","text":"<p>Scopie is designed to work in any language and in virtually any system that can use authorization.</p> <p>The exact interface will vary based on what how each language formats functions, variables and handles errors. Even the order of parameters may vary based on language due to optional or key value support.</p>"},{"location":"specification/functions/#is-allowed","title":"Is Allowed","text":"<p>Returns whether or not the scopes are allowed with the given rules. Depending on the language, we would also return an error, throw or raise an exception for invalid scopes or rules.</p> Is Allowed<pre><code>is_allowed(\n    # Scopes specifies one or more scopes our actor must match.\n    # When using more then one scope, they are treated as a series of OR conditions,\n    # and an actor will be allowed if they match any of the scopes.\n    # Example: [\"accounts/thor/edit\"]\n    scopes []string,\n    # Rules specifies one or more rules our requesting scopes has to have\n    # to be allowed access.\n    # Example: [\"allow/accounts/@username/*\"]\n    rules []string,\n    # An optional dictionary or map of variable to values.\n    # Variable keys should not start with `@`\n    # Example: { \"username\": \"thor\" }\n    variables dict[string, string],\n) -&gt; bool and error\n</code></pre>"},{"location":"specification/functions/#validate-scopes","title":"Validate Scopes","text":"<p>Checks whether or not the given scopes or rules are valid given the requirements outlined in the specification. Depending on the language, this could return a boolean and throw an error, return an error or other language standard.</p> Validate Scopes<pre><code>validate_scopes(\n    # Given scope or rule to validate.\n    scopeOrRules []string,\n) error\n</code></pre>"},{"location":"specification/logic/","title":"Allow rules","text":"<p>Scopie flow works as a nested for loop iterating over the rules and scopes.</p>"},{"location":"specification/logic/#matching","title":"Matching","text":"<p>In order for a scope to match a rule it must have the same number of blocks, and that every block matches.</p> Mismatched Lengths<pre><code>scopes = [\"acme/accounts/edit\"]\nrules  = [\"allow/accounts/*\"]\n           ^ rules has two levels while required has three\n</code></pre> Mismatched Block<pre><code>scopes = [\"acme/accounts/edit\"]\nrules  = [\"allow/acme/accounts/read\"]\n                               ^ edit does not equal read\n</code></pre>"},{"location":"specification/logic/#deny-break","title":"Deny Break","text":"<p>If a scope matches a deny rule, we instantly return false. We do not check until the end of our loops in this case. If any error is present after the deny rule match, it will not be found or returned.</p> Deny Break<pre><code>scopes = [\"accounts/edit\"]\nrules  = [\"deny/accounts/*\",\"allow/blogs/*\"]\n                ^ matches    ^ skipped\n</code></pre>"},{"location":"specification/logic/#allow-skips","title":"Allow skips","text":"<p>If an allow rule is matched early in the loop, we can skip trying to match any future allow rules as we already matched one. Thus, it is possible to not have errors returned if they are part of rules we skipped.</p> Allow Skip<pre><code>scopes = [\"accounts/edit\"]\nrules  = [\"allow/accounts/*\",\"allow/blogs/*\"]\n           ^ matches          ^ skipped\n</code></pre>"},{"location":"specification/logic/#flowchart","title":"Flowchart","text":"<pre><code>flowchart TD\n    AR[rules Rules]\n    RS[Required Scopes]\n    D[All Checked]\n    M{Is Match}\n    DR[Deny Rule]\n    AlR[Allow Rule]\n    T((return true))\n    F((return false))\n\n    AR--&gt;|For each Required Scope|RS\n    RS--&gt;|Does the required scope\\nmatch rules rule?|M\n    M--&gt;|Is Deny Rule|DR\n    M--&gt;|Is Allow Rule|AlR\n    DR--&gt;F\n    AlR--&gt;|Mark as allowed|RS\n    RS--&gt;|Checked all cases|D\n    D----&gt;|If allowed|T\n    D----&gt;|If not allowed|F</code></pre>"},{"location":"specification/terms/","title":"Terms","text":"<p>Terms and there definitions as it relates to scopie.</p>"},{"location":"specification/terms/#block","title":"Block","text":"<p>Values between slashes that indicate levels of our scope. Can contain one of the following:</p> <ol> <li>A literal string.</li> <li>An array of literal strings separated by pipe (<code>|</code>) characters that are treated as an OR list.</li> <li>A literal string prefixed by an at (<code>@</code>) that is translated to a value from our variable map.</li> <li>A single asterisk (<code>*</code>) that will auto match any value, known as a wildcard.</li> <li>Two asterisks (<code>**</code>) that matches the rest of the rule.</li> </ol> Block examples<pre><code>value\none|two|three\n@user_name\n*\n**\n</code></pre>"},{"location":"specification/terms/#scope","title":"Scope","text":"<p>One or more blocks, joined by a slash (<code>/</code>).</p> Scope examples<pre><code>alpha/beta/omega\nblog/@user/read|write\naccounts/**\n</code></pre>"},{"location":"specification/terms/#permisson","title":"Permisson","text":"<p>Whether or not we are allowed to do the action. Either the literal string <code>allow</code> or <code>deny</code>.</p>"},{"location":"specification/terms/#rule","title":"Rule","text":"<p>Permission and literal string separated by slashes (<code>/</code>). Only literal values are allowed in rules.</p> Rule examples<pre><code>allow/bucket/images/upload\ndeny/iam_accounts/edit\n</code></pre>"},{"location":"specification/terms/#keywords","title":"Keywords","text":"<p>They may not be explicity checked but it is important not to use any scopie keywords when defining scopes and rules as they may have unintended side effects.</p> <ul> <li>allow</li> <li>deny</li> </ul>"}]}