{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Scopie","text":"<p>Authorization engine providing fine grained access while you control the data. Aimed at being easy to use and implement without overtaking other parts of your system.</p>"},{"location":"#database-quick-start","title":"Database Quick Start","text":"<p>Given a users table for a blogging app with some users.</p> <pre><code>CREATE TABLE users (\n  id SERIAL PRIMARY KEY,\n  username TEXT,\n  scopes TEXT\n  -- other fields\n);\n\nINSERT INTO users (id, username, scopes) VALUES (\n  1, 'elsa', 'blog/post/create'\n);\n\nINSERT INTO users (id, username, scopes) VALUES (\n  2, 'belle', 'blog/post/read'\n);\n</code></pre> <p>Now when you a user goes to create a post. We can check if they have the <code>blog/post/create</code> scope.</p> <pre><code>def create_post(self, user_id: int, body str):\n    user := get_user(user_id)\n    auth_vars = {\n        \"user_id\"\n        \"user_name\": user.username,\n    }\n\n    if not is_authorized(auth_vars, \"blog/post/create\", user.scopes):\n        return\n\n    create_post(user, body)\n</code></pre>"},{"location":"implementations/","title":"Implementations","text":"<p>None yet, check back soon.</p>"},{"location":"examples/","title":"Examples","text":"<p>todo</p>"},{"location":"examples/blog/","title":"Scopie Blog","text":""},{"location":"examples/blog/#actions","title":"Actions","text":"<p>Blog project with accounts and posts under accounts.</p> Scope Action /account/{account_id}/read read account info /account/{account_id}/update update account info /account/{account_id}/delete delete account /blog/post/create create posts /blog/post/read read posts /blog/post/{post_id}/read read a specific post /blog/post/{post_id}/read_draft read a specific post that is in draft /blog/post/{post_id}/update update a specific post /blog/post/{post_id}/delete delete a specific post /blog/post/{post_id}/publish publish a specific post /blog/post/{post_id}/unpublish unpublish a specific post /account/{account_id}/posts/create create posts on an account /account/{account_id}/posts/read read posts from an account /account/{account_id}/posts/update update posts from an account /account/{account_id}/posts/delete delete posts from an account"},{"location":"examples/blog/#scenarios","title":"Scenarios","text":"<ol> <li>Allow a user to do everything on their account: id=acc_01<ul> <li><code>allow/account/acc_01/*</code></li> </ul> </li> <li>Deny a user from reading a post: post_id=post_01<ul> <li><code>deny/blog/post/read/post_01</code></li> </ul> </li> <li>Moderator can delete any post<ul> <li><code>allow/blog/post/*/delete</code></li> </ul> </li> <li>Allow a user to update a post on their account<ul> <li><code>allow/account/acc_01/posts/update</code></li> </ul> </li> <li>Account or post level checks<ul> <li><code>allow/account/acc_01/posts/read,allow/blog/post/post_01/read</code></li> <li>the checking actor must match one of the above, aka an OR check</li> <li>this leads to an O(n*m) where n = required scopes and m = actor scopes</li> </ul> </li> </ol>"},{"location":"specification/","title":"Specification","text":"<p>Scopie is designed as a set of logic rules such that it is possible to evaluate whether or not an action is allowed to take place.</p> <p>A full list of specifications with inputs and outputs are available  as a JSON file that implementations should use in there test suite. This file also includes specific tests for benchmarking performance.</p> <ul> <li> <p> Terms</p> <p>Understanding the terminology of Scopie.</p> </li> <li> <p> Functions</p> <p>What functions are defined in scopie implementations.</p> </li> <li> <p> Errors</p> <p>Lookup what errors you may run into.</p> </li> <li> <p> Logic Flow</p> <p>Read about the logic rules for processing authorization.</p> </li> </ul>"},{"location":"specification/bnf/","title":"BNF Notation","text":"<p>Backus Naur Form notation of the scopie parsing rules. Note that just passing BNF is not enough to be a valid scope as there are edge cases not specified. One such example is that super wildcards must be the last block.</p> <pre><code>&lt;scopes&gt; ::= &lt;scope&gt; (&lt;scope_sep&gt; &lt;scope&gt;)+ | &lt;scope&gt;\n&lt;rules&gt; ::= &lt;rule&gt; (&lt;scope_sep&gt; &lt;rule&gt;)+ | &lt;rule&gt;\n\n&lt;rule&gt; ::= &lt;any_permission&gt; (&lt;block_sep&gt; &lt;scope&gt;)+\n&lt;scope&gt; ::= &lt;block&gt; (&lt;block_sep&gt; &lt;block&gt;)+ | &lt;block&gt;\n\n&lt;block&gt; ::= &lt;literals&gt; | &lt;array_block&gt; | &lt;var_block&gt; | &lt;wildcard&gt; | &lt;super_wildcard&gt;\n&lt;array_block&gt; ::= &lt;literals&gt; (&lt;array_sep&gt; &lt;literals&gt;)+\n&lt;var_block&gt; ::= &lt;var_prefix&gt; &lt;literals&gt;\n\n&lt;any_permission&gt; ::= &lt;allow_permission&gt; | &lt;deny_permission&gt;\n\n&lt;block_sep&gt; ::= \"/\"\n&lt;scope_sep&gt; ::= \",\"\n&lt;array_sep&gt; ::= \"|\"\n&lt;var_prefix&gt; ::= \"@\"\n&lt;wildcard&gt; ::= \"*\"\n&lt;super_wildcard&gt; ::= \"**\"\n&lt;allow_permission&gt; ::= \"allow\"\n&lt;deny_permission&gt; ::= \"deny\"\n&lt;literals&gt; ::= ([A-Z] | [a-z] | [0-9] | \"_\" | \"-\")+\n</code></pre>"},{"location":"specification/errors/","title":"Errors","text":"<p>When validating a scope or trying to process a scope or rule that has an incorrect format we return or throw errors. To keep consistency across languages we define an error type in the specification and include error values as part of the validation test suite.</p> <p>Parsing the errors should not be required, this format is aimed at being helpful to log for internal debugging, but are probably not useful for your end users.</p> <p>Format: <pre><code>scopie &lt;code&gt;\n    in &lt;scopes or actor&gt;@&lt;character index of error&gt;:\n    &lt;short message&gt;\n</code></pre> Note: newlines added for clarity</p> <p>For a scope of <code>blog/:15/read</code>, since <code>:</code> is not allowed in scopes. <pre><code>scopie 100 in scopes@5: invalid character ':'\n</code></pre></p> <p>Errors here are not in any particular order, but just as they are discovered or valiations written. The short message given in the error is also repeated here as the fist line.</p>"},{"location":"specification/errors/#100","title":"100","text":"<p>Invalid character.</p> <p>Scopie only allows letters, numbers, underscore <code>_</code>  and dashes <code>-</code> in scope blocks, any other character is invalid.</p> Valid<pre><code>blog/15/create\n</code></pre> Invalid<pre><code>blog/:15/create\n     ^ invalid character ':'\n</code></pre>"},{"location":"specification/errors/#101","title":"101","text":"<p>Variable inside array group.</p> <p>Array blocks can not contain variables and must be the entire block on its own. This is so that variables are used more like namespaces or grouping specifiers and would conflict with array blocks that are one of a few actions or specific namespaces.</p> Valid<pre><code>projects/@project/repository/create\n</code></pre> Invalid<pre><code>projects/acme|sesame|@project/repository/create\n                     ^ variable not allowed inside array group\n</code></pre>"},{"location":"specification/functions/","title":"Functions","text":"<p>Scopie is designed to work in any language and in virtually any system that can use authorization. The exact interface will vary based on what how each language formats functions, variables and handles errors.</p> Is Allowed<pre><code># is_allowed returns whether or not our actor is allowed the action specified in the scopes string.\n# Depending on the language, we would also return an error, throw or raise an exception for invalid scopes.\nis_allowed(\n    # A dictionary or map of variable to values.\n    # Variable keys should not start with `@`\n    # Example: { \"username\": \"thor\" }\n    vars dict[string, string],\n    # Scopes specifies one or more scopes our actor must match as defined above.\n    # Example: \"accounts/thor/edit\"\n    scopes string,\n    # Actor specifies one or more rules our requesting actor has.\n    # Example: \"accounts/@username/*\"\n    actor []string,\n) -&gt; bool and error\n</code></pre> Validate Scope<pre><code># ValidateScope checks whether or not the given scope is valid given the requirements outlined in the specification.\n# Depending on the language, we would return a native like error value.\nvalidate_scope(\n    # Given scope to validate.\n    scope string,\n) error\n</code></pre>"},{"location":"specification/logic/","title":"Allow rules","text":"<p>Coming Soon...</p>"},{"location":"specification/terms/","title":"Terms","text":"<p>Terms and there definitions as it relates to scopie.</p>"},{"location":"specification/terms/#block","title":"Block","text":"<p>Values between slashes that indicate levels of our scope. Can contain one of the following:</p> <ol> <li>A literal string.</li> <li>An array of literal strings separated by pipe (<code>|</code>) characters that are treated as an OR list.</li> <li>A literal string prefixed by an at (<code>@</code>) that is translated to a value from our variable map.</li> <li>A single asterisk (<code>*</code>) that will auto match any value, known as a wildcard.</li> <li>Two asterisks (<code>**</code>) that matches the rest of the rule.</li> </ol> Block examples<pre><code>value\none|two|three\n@user_name\n*\n**\n</code></pre>"},{"location":"specification/terms/#scope","title":"Scope","text":"<p>One or more blocks, joined by a slash (<code>/</code>).</p> Scope examples<pre><code>alpha/beta/omega\nblog/@user/read|write\naccounts/**\n</code></pre>"},{"location":"specification/terms/#permisson","title":"Permisson","text":"<p>Whether or not we are allowed to do the action. Either the literal string <code>allow</code> or <code>deny</code>.</p>"},{"location":"specification/terms/#rule","title":"Rule","text":"<p>Permission and literal string separated by slashes (<code>/</code>). Only literal values are allowed in rules.</p> Rule examples<pre><code>allow/bucket/images/upload\ndeny/iam_accounts/edit\n</code></pre>"}]}